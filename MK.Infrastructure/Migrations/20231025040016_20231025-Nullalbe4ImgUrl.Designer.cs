// <auto-generated />
using System;
using System.Collections.Generic;
using MK.Infrastructure.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MK.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231025040016_20231025-Nullalbe4ImgUrl")]
    partial class _20231025Nullalbe4ImgUrl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DishTray", b =>
                {
                    b.Property<Guid>("DishiesId")
                        .HasColumnType("uuid")
                        .HasColumnName("dishies_id");

                    b.Property<Guid>("TraysId")
                        .HasColumnType("uuid")
                        .HasColumnName("trays_id");

                    b.HasKey("DishiesId", "TraysId")
                        .HasName("pk_dish_tray");

                    b.HasIndex("TraysId")
                        .HasDatabaseName("ix_dish_tray_trays_id");

                    b.ToTable("dish_tray", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid[]>("Boundaries")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("boundaries");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_area");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_customer");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_customer_user_id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid")
                        .HasColumnName("kitchen_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_dish");

                    b.HasIndex("KitchenId")
                        .HasDatabaseName("ix_dish_kitchen_id");

                    b.ToTable("dish", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.FavouriteKitchen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid")
                        .HasColumnName("kitchen_id");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_favourite_kitchen");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_favourite_kitchen_customer_id");

                    b.HasIndex("KitchenId")
                        .HasDatabaseName("ix_favourite_kitchen_kitchen_id");

                    b.ToTable("favourite_kitchen", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text")
                        .HasColumnName("img_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid")
                        .HasColumnName("kitchen_id");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_feedback");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_feedback_customer_id");

                    b.HasIndex("KitchenId")
                        .HasDatabaseName("ix_feedback_kitchen_id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("ix_feedback_order_id");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Kitchen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text")
                        .HasColumnName("img_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_kitchen");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_kitchen_area_id");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasDatabaseName("ix_kitchen_location_id");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_kitchen_owner_id");

                    b.ToTable("kitchen", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasColumnType("double precision")
                        .HasColumnName("lng");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_location");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_time");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid")
                        .HasColumnName("kitchen_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("ServiceFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("service_from");

                    b.Property<int>("ServiceQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("service_quantity");

                    b.Property<DateTime>("ServiceTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("service_to");

                    b.Property<Guid>("TrayId")
                        .HasColumnType("uuid")
                        .HasColumnName("tray_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_meal");

                    b.HasIndex("KitchenId")
                        .HasDatabaseName("ix_meal_kitchen_id");

                    b.HasIndex("TrayId")
                        .HasDatabaseName("ix_meal_tray_id");

                    b.ToTable("meal", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_notification_receiver_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uuid")
                        .HasColumnName("meal_id");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("Surcharge")
                        .HasColumnType("numeric")
                        .HasColumnName("surcharge");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("total_quantity");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_order");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_order_customer_id");

                    b.HasIndex("MealId")
                        .HasDatabaseName("ix_order_meal_id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.OrderPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_type_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_order_payment");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_payment_order_id");

                    b.HasIndex("PaymentTypeId")
                        .HasDatabaseName("ix_order_payment_payment_type_id");

                    b.ToTable("order_payment", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("provider");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_payment_type");

                    b.ToTable("payment_type", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Tray", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("img_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid")
                        .HasColumnName("kitchen_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_tray");

                    b.HasIndex("KitchenId")
                        .HasDatabaseName("ix_tray_kitchen_id");

                    b.ToTable("tray", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<List<string>>("FcmToken")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("fcm_token");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("No"));

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("DishTray", b =>
                {
                    b.HasOne("MK.Domain.Entity.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dish_tray_dish_dishies_id");

                    b.HasOne("MK.Domain.Entity.Tray", null)
                        .WithMany()
                        .HasForeignKey("TraysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dish_tray_tray_trays_id");
                });

            modelBuilder.Entity("MK.Domain.Entity.Customer", b =>
                {
                    b.HasOne("MK.Domain.Entity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("MK.Domain.Entity.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MK.Domain.Entity.Dish", b =>
                {
                    b.HasOne("MK.Domain.Entity.Kitchen", "Kitchen")
                        .WithMany("Dishes")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dish_kitchen_kitchen_id");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("MK.Domain.Entity.FavouriteKitchen", b =>
                {
                    b.HasOne("MK.Domain.Entity.Customer", "Customer")
                        .WithMany("FavouriteKitchens")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favourite_kitchen_customer_customer_id");

                    b.HasOne("MK.Domain.Entity.Kitchen", "Kitchen")
                        .WithMany("FavoriteKitchens")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favourite_kitchen_kitchen_kitchen_id");

                    b.Navigation("Customer");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("MK.Domain.Entity.Feedback", b =>
                {
                    b.HasOne("MK.Domain.Entity.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedback_customer_customer_id");

                    b.HasOne("MK.Domain.Entity.Kitchen", "Kitchen")
                        .WithMany("Feedbacks")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedback_kitchen_kitchen_id");

                    b.HasOne("MK.Domain.Entity.Order", "Order")
                        .WithOne("Feedback")
                        .HasForeignKey("MK.Domain.Entity.Feedback", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedback_order_order_id");

                    b.Navigation("Customer");

                    b.Navigation("Kitchen");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MK.Domain.Entity.Kitchen", b =>
                {
                    b.HasOne("MK.Domain.Entity.Area", "Area")
                        .WithMany("Kitchens")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kitchen_area_area_id");

                    b.HasOne("MK.Domain.Entity.Location", "Location")
                        .WithOne("Kitchen")
                        .HasForeignKey("MK.Domain.Entity.Kitchen", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kitchen_location_location_id");

                    b.HasOne("MK.Domain.Entity.User", "Owner")
                        .WithOne("Kitchen")
                        .HasForeignKey("MK.Domain.Entity.Kitchen", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kitchen_user_owner_id");

                    b.Navigation("Area");

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MK.Domain.Entity.Meal", b =>
                {
                    b.HasOne("MK.Domain.Entity.Kitchen", "Kitchen")
                        .WithMany("Meals")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meal_kitchen_kitchen_id");

                    b.HasOne("MK.Domain.Entity.Tray", "Tray")
                        .WithMany("Meals")
                        .HasForeignKey("TrayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meal_tray_tray_id");

                    b.Navigation("Kitchen");

                    b.Navigation("Tray");
                });

            modelBuilder.Entity("MK.Domain.Entity.Notification", b =>
                {
                    b.HasOne("MK.Domain.Entity.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_user_receiver_id");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("MK.Domain.Entity.Order", b =>
                {
                    b.HasOne("MK.Domain.Entity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_customer_customer_id");

                    b.HasOne("MK.Domain.Entity.Meal", "Meal")
                        .WithMany("Orders")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_meal_meal_id");

                    b.Navigation("Customer");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("MK.Domain.Entity.OrderPayment", b =>
                {
                    b.HasOne("MK.Domain.Entity.Order", "Order")
                        .WithMany("OrderPayments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_payment_order_order_id");

                    b.HasOne("MK.Domain.Entity.PaymentType", "PaymentType")
                        .WithMany("OrderPayments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_payment_payment_type_payment_type_id");

                    b.Navigation("Order");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MK.Domain.Entity.Tray", b =>
                {
                    b.HasOne("MK.Domain.Entity.Kitchen", "Kitchen")
                        .WithMany("Trays")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tray_kitchen_kitchen_id");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("MK.Domain.Entity.User", b =>
                {
                    b.HasOne("MK.Domain.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MK.Domain.Entity.Area", b =>
                {
                    b.Navigation("Kitchens");
                });

            modelBuilder.Entity("MK.Domain.Entity.Customer", b =>
                {
                    b.Navigation("FavouriteKitchens");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MK.Domain.Entity.Kitchen", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("FavoriteKitchens");

                    b.Navigation("Feedbacks");

                    b.Navigation("Meals");

                    b.Navigation("Trays");
                });

            modelBuilder.Entity("MK.Domain.Entity.Location", b =>
                {
                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("MK.Domain.Entity.Meal", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MK.Domain.Entity.Order", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("OrderPayments");
                });

            modelBuilder.Entity("MK.Domain.Entity.PaymentType", b =>
                {
                    b.Navigation("OrderPayments");
                });

            modelBuilder.Entity("MK.Domain.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MK.Domain.Entity.Tray", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("MK.Domain.Entity.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Kitchen");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}

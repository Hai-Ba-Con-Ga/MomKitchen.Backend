// <auto-generated />
using System;
using MK.Infrastructure.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MK.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230923013028_init-db")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AreaMeal", b =>
                {
                    b.Property<Guid>("AreasId")
                        .HasColumnType("uuid")
                        .HasColumnName("areas_id");

                    b.Property<Guid>("MealsId")
                        .HasColumnType("uuid")
                        .HasColumnName("meals_id");

                    b.HasKey("AreasId", "MealsId")
                        .HasName("pk_area_meal");

                    b.HasIndex("MealsId")
                        .HasDatabaseName("ix_area_meal_meals_id");

                    b.ToTable("area_meal", (string)null);
                });

            modelBuilder.Entity("DishMeal", b =>
                {
                    b.Property<Guid>("DishesId")
                        .HasColumnType("uuid")
                        .HasColumnName("dishes_id");

                    b.Property<Guid>("MealsId")
                        .HasColumnType("uuid")
                        .HasColumnName("meals_id");

                    b.HasKey("DishesId", "MealsId")
                        .HasName("pk_dish_meal");

                    b.HasIndex("MealsId")
                        .HasDatabaseName("ix_dish_meal_meals_id");

                    b.ToTable("dish_meal", (string)null);
                });

            modelBuilder.Entity("KitchenPromotion", b =>
                {
                    b.Property<Guid>("KitchensId")
                        .HasColumnType("uuid")
                        .HasColumnName("kitchens_id");

                    b.Property<Guid>("PromotionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotions_id");

                    b.HasKey("KitchensId", "PromotionsId")
                        .HasName("pk_kitchen_promotion");

                    b.HasIndex("PromotionsId")
                        .HasDatabaseName("ix_kitchen_promotion_promotions_id");

                    b.ToTable("kitchen_promotion", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_area");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid")
                        .HasColumnName("kitchen_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_conversation");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_conversation_customer_id");

                    b.HasIndex("KitchenId")
                        .HasDatabaseName("ix_conversation_kitchen_id");

                    b.ToTable("conversation", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("PointWallet")
                        .HasColumnType("integer")
                        .HasColumnName("point_wallet");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_customer");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_customer_user_id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_dish");

                    b.ToTable("dish", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid")
                        .HasColumnName("province_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_district");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ix_district_province_id");

                    b.ToTable("district", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.FavouriteKitchen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid")
                        .HasColumnName("kitchen_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_favourite_kitchen");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_favourite_kitchen_customer_id");

                    b.HasIndex("KitchenId")
                        .HasDatabaseName("ix_favourite_kitchen_kitchen_id");

                    b.ToTable("favourite_kitchen", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid")
                        .HasColumnName("kitchen_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_feedbacks_customer_id");

                    b.HasIndex("KitchenId")
                        .HasDatabaseName("ix_feedbacks_kitchen_id");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Kitchen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid")
                        .HasColumnName("province_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("WardId")
                        .HasColumnType("uuid")
                        .HasColumnName("ward_id");

                    b.HasKey("Id")
                        .HasName("pk_kitchen");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_kitchen_district_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_kitchen_owner_id");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ix_kitchen_province_id");

                    b.HasIndex("WardId")
                        .HasDatabaseName("ix_kitchen_ward_id");

                    b.ToTable("kitchen", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<DateTime>("ServiceFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("service_from");

                    b.Property<DateTime>("ServiceTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("service_to");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_meal");

                    b.ToTable("meal", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_notification_receiver_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uuid")
                        .HasColumnName("voucher_id");

                    b.HasKey("Id")
                        .HasName("pk_order");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_order_customer_id");

                    b.HasIndex("VoucherId")
                        .HasDatabaseName("ix_order_voucher_id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.OrderPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_order_payment");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_payment_order_id");

                    b.ToTable("order_payment", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_promotion");

                    b.ToTable("promotion", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("no");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_province");

                    b.ToTable("province", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_voucher");

                    b.HasIndex("PromotionId")
                        .HasDatabaseName("ix_voucher_promotion_id");

                    b.ToTable("voucher", (string)null);
                });

            modelBuilder.Entity("MK.Domain.Entity.Ward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid")
                        .HasColumnName("province_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_ward");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_ward_district_id");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ix_ward_province_id");

                    b.ToTable("ward", (string)null);
                });

            modelBuilder.Entity("AreaMeal", b =>
                {
                    b.HasOne("MK.Domain.Entity.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_area_meal_area_areas_id");

                    b.HasOne("MK.Domain.Entity.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_area_meal_meal_meals_id");
                });

            modelBuilder.Entity("DishMeal", b =>
                {
                    b.HasOne("MK.Domain.Entity.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dish_meal_dish_dishes_id");

                    b.HasOne("MK.Domain.Entity.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dish_meal_meal_meals_id");
                });

            modelBuilder.Entity("KitchenPromotion", b =>
                {
                    b.HasOne("MK.Domain.Entity.Kitchen", null)
                        .WithMany()
                        .HasForeignKey("KitchensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kitchen_promotion_kitchen_kitchens_id");

                    b.HasOne("MK.Domain.Entity.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kitchen_promotion_promotion_promotions_id");
                });

            modelBuilder.Entity("MK.Domain.Entity.Conversation", b =>
                {
                    b.HasOne("MK.Domain.Entity.Customer", "Customer")
                        .WithMany("Conversations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_customer_customer_id");

                    b.HasOne("MK.Domain.Entity.Kitchen", "Kitchen")
                        .WithMany("Conversations")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_kitchen_kitchen_id");

                    b.Navigation("Customer");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("MK.Domain.Entity.Customer", b =>
                {
                    b.HasOne("MK.Domain.Entity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("MK.Domain.Entity.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MK.Domain.Entity.District", b =>
                {
                    b.HasOne("MK.Domain.Entity.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_district_province_province_id");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("MK.Domain.Entity.FavouriteKitchen", b =>
                {
                    b.HasOne("MK.Domain.Entity.Customer", "Customer")
                        .WithMany("FavouriteKitchens")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favourite_kitchen_customer_customer_id");

                    b.HasOne("MK.Domain.Entity.Kitchen", "Kitchen")
                        .WithMany("FavoriteKitchens")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favourite_kitchen_kitchen_kitchen_id");

                    b.Navigation("Customer");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("MK.Domain.Entity.Feedback", b =>
                {
                    b.HasOne("MK.Domain.Entity.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_customer_customer_id");

                    b.HasOne("MK.Domain.Entity.Kitchen", "Kitchen")
                        .WithMany("Feedbacks")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_kitchen_kitchen_id");

                    b.Navigation("Customer");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("MK.Domain.Entity.Kitchen", b =>
                {
                    b.HasOne("MK.Domain.Entity.District", "District")
                        .WithMany("Kitchens")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kitchen_district_district_id");

                    b.HasOne("MK.Domain.Entity.User", "Owner")
                        .WithMany("Kitchen")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kitchen_user_owner_id");

                    b.HasOne("MK.Domain.Entity.Province", "Province")
                        .WithMany("Kitchens")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kitchen_province_province_id");

                    b.HasOne("MK.Domain.Entity.Ward", "Ward")
                        .WithMany("Kitchens")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kitchen_ward_ward_id");

                    b.Navigation("District");

                    b.Navigation("Owner");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("MK.Domain.Entity.Notification", b =>
                {
                    b.HasOne("MK.Domain.Entity.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_user_receiver_id");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("MK.Domain.Entity.Order", b =>
                {
                    b.HasOne("MK.Domain.Entity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_customer_customer_id");

                    b.HasOne("MK.Domain.Entity.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("fk_order_voucher_voucher_id");

                    b.Navigation("Customer");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("MK.Domain.Entity.OrderPayment", b =>
                {
                    b.HasOne("MK.Domain.Entity.Order", "Order")
                        .WithOne("OrderPayment")
                        .HasForeignKey("MK.Domain.Entity.OrderPayment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_payment_order_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MK.Domain.Entity.User", b =>
                {
                    b.HasOne("MK.Domain.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MK.Domain.Entity.Voucher", b =>
                {
                    b.HasOne("MK.Domain.Entity.Promotion", "Promotion")
                        .WithMany("Vouchers")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voucher_promotion_promotion_id");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("MK.Domain.Entity.Ward", b =>
                {
                    b.HasOne("MK.Domain.Entity.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ward_district_district_id");

                    b.HasOne("MK.Domain.Entity.Province", "Province")
                        .WithMany("Wards")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ward_province_province_id");

                    b.Navigation("District");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("MK.Domain.Entity.Customer", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("FavouriteKitchens");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MK.Domain.Entity.District", b =>
                {
                    b.Navigation("Kitchens");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("MK.Domain.Entity.Kitchen", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("FavoriteKitchens");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("MK.Domain.Entity.Order", b =>
                {
                    b.Navigation("OrderPayment");
                });

            modelBuilder.Entity("MK.Domain.Entity.Promotion", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("MK.Domain.Entity.Province", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Kitchens");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("MK.Domain.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MK.Domain.Entity.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Kitchen");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MK.Domain.Entity.Voucher", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MK.Domain.Entity.Ward", b =>
                {
                    b.Navigation("Kitchens");
                });
#pragma warning restore 612, 618
        }
    }
}
